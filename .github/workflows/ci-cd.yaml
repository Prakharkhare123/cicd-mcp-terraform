name: CI-CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ai-cicd-app:${{ github.sha }}
    
    - name: Generate Terraform variables
      run: |
        cat > auto.tfvars << EOF
        image = "${{ secrets.DOCKERHUB_USERNAME }}/ai-cicd-app:${{ github.sha }}"
        app_name = "ai-cicd-app"
        namespace = "default"
        replicas = 2
        service_type = "NodePort"
        EOF
    
    - name: Save artifact
      uses: actions/upload-artifact@v4
      with:
        name: tfvars
        path: auto.tfvars

  terraform-plan:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/download-artifact@v4
      with:
        name: tfvars
        path: terraform
    
    - name: Create KIND cluster
      uses: helm/kind-action@v1.10.0
      with:
        cluster_name: test-cluster
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    
    - name: Terraform Init
      working-directory: terraform
      run: terraform init -input=false
    
    - name: Terraform Validate
      working-directory: terraform
      run: terraform validate
    
    - name: Terraform Plan
      working-directory: terraform
      run: terraform plan -var-file=auto.tfvars -input=false -no-color

  terraform-apply:
    if: github.ref == 'refs/heads/main'
    needs: terraform-plan
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/download-artifact@v4
      with:
        name: tfvars
        path: terraform
    
    - name: Create KIND cluster
      uses: helm/kind-action@v1.10.0
      with:
        cluster_name: test-cluster
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    
    - name: Terraform Init
      working-directory: terraform
      run: terraform init -input=false
    
    - name: Terraform Apply
      working-directory: terraform
      run: |
        terraform apply -var-file=auto.tfvars -input=false -auto-approve
        echo "=== Terraform Outputs ==="
        terraform output
    
    - name: Verify deployment
      run: |
        echo "=== Checking deployment status ==="
        kubectl get deployments
        kubectl get pods -l app=ai-cicd-app
        kubectl get svc ai-cicd-app-svc
        
        echo "=== Waiting for pods to be ready ==="
        kubectl wait --for=condition=ready pod -l app=ai-cicd-app --timeout=60s
        
        echo "=== Getting service details ==="
        kubectl describe svc ai-cicd-app-svc
        
        echo "=== Port forwarding and testing app ==="
        kubectl port-forward svc/ai-cicd-app-svc 8080:80 &
        sleep 5
        curl -f http://localhost:8080/health || echo "Health check failed"
        curl -f http://localhost:8080 || echo "App not responding"
        
        echo "=== Deployment successful! ==="
        
        echo "=== AI Analysis ==="
        echo "🤖 Deployment completed successfully!"
        echo "📊 Metrics: $(kubectl top pods -l app=ai-cicd-app --no-headers | wc -l) pods running"
        echo "🔍 Health: All pods ready and responding"
        echo "💡 Suggestion: Monitor logs for any issues in the next 5 minutes"